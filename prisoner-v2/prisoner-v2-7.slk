Semantics=SingleAssignment;

Agent Environment
-- maximum chain length 2
    Vars:
        ok: 0.. 0;
        counter: 0 .. 2;
        init: 0 .. 2;
        act_step: boolean;
        does_o_left: boolean;
        does_o_noop: boolean;
        does_o_right: boolean;
        does_x_left: boolean;
        does_x_noop: boolean;
        does_x_right: boolean;
        true_control_o: boolean;
        true_control_x: boolean;
        true_l: boolean;
        true_ll: boolean;
        true_lr: boolean;
        true_r: boolean;
        true_rl: boolean;
        true_rll: boolean;
        true_rlr: boolean;
        true_root: boolean;
        true_rr: boolean;
        true_rrl: boolean;
        true_rrr: boolean;
        sees_o_doneleft: boolean;
        seen_o_doneleft_1: boolean;
        seen_o_doneleft_2: boolean;
        seen_o_doneleft_3: boolean;
        seen_o_doneleft_4: boolean;
        sees_o_doneright: boolean;
        seen_o_doneright_1: boolean;
        seen_o_doneright_2: boolean;
        seen_o_doneright_3: boolean;
        seen_o_doneright_4: boolean;
        sees_o_xdone: boolean;
        seen_o_xdone_1: boolean;
        seen_o_xdone_2: boolean;
        seen_o_xdone_3: boolean;
        seen_o_xdone_4: boolean;
        sees_x_doneleft: boolean;
        seen_x_doneleft_1: boolean;
        seen_x_doneleft_2: boolean;
        seen_x_doneleft_3: boolean;
        seen_x_doneleft_4: boolean;
        sees_x_doneright: boolean;
        seen_x_doneright_1: boolean;
        seen_x_doneright_2: boolean;
        seen_x_doneright_3: boolean;
        seen_x_doneright_4: boolean;
        sees_x_odone: boolean;
        seen_x_odone_1: boolean;
        seen_x_odone_2: boolean;
        seen_x_odone_3: boolean;
        seen_x_odone_4: boolean;
        legal_o_left: boolean;
        legal_o_noop: boolean;
        legal_o_right: boolean;
        legal_x_left: boolean;
        legal_x_noop: boolean;
        legal_x_right: boolean;
        next_control_o: boolean;
        next_control_x: boolean;
        next_l: boolean;
        next_ll: boolean;
        next_lr: boolean;
        next_r: boolean;
        next_rl: boolean;
        next_rll: boolean;
        next_rlr: boolean;
        next_root: boolean;
        next_rr: boolean;
        next_rrl: boolean;
        next_rrr: boolean;
        terminal: boolean;
        done_o_left_1: boolean;
        done_o_left_2: boolean;
        done_o_left_3: boolean;
        done_o_noop_1: boolean;
        done_o_noop_2: boolean;
        done_o_noop_3: boolean;
        done_o_right_1: boolean;
        done_o_right_2: boolean;
        done_o_right_3: boolean;
        done_x_left_1: boolean;
        done_x_left_2: boolean;
        done_x_left_3: boolean;
        done_x_noop_1: boolean;
        done_x_noop_2: boolean;
        done_x_noop_3: boolean;
        done_x_right_1: boolean;
        done_x_right_2: boolean;
        done_x_right_3: boolean;
    end Vars
    Actions = { none };
    Protocol:
        Other: {none};
    end Protocol
    Evolution:
        -- print the counters
        ok = 0 if (ok = 0);
        (init = init - 1) if (init > 0);
        (init = 0) if (init = 0);
        (counter = counter + 1) if !(init <> 0 or (terminal = true and counter = 0) or counter = 2 or (counter = 0 and act_step = false));
        (counter = 0) if (init <> 0 or (terminal = true and counter = 0) or counter = 2 or (counter = 0 and act_step = false));
        act_step = false if ((init > 1) or (counter < 0 and init = 0 and act_step = false) or (counter = 2 and init = 0 and act_step = true));
        act_step = true if !((init > 1) or (counter < 0 and init = 0 and act_step = false) or (counter = 2 and init = 0 and act_step = true));

        -- print the dependencies
        legal_o_left=true if (((true_control_o = true)));
        legal_o_left=false if !(((true_control_o = true)));
        legal_o_noop=true if (((true_control_x = true)));
        legal_o_noop=false if !(((true_control_x = true)));
        legal_o_right=true if (((true_control_o = true)));
        legal_o_right=false if !(((true_control_o = true)));
        legal_x_left=true if (((true_control_x = true)));
        legal_x_left=false if !(((true_control_x = true)));
        legal_x_noop=true if (((true_control_o = true)));
        legal_x_noop=false if !(((true_control_o = true)));
        legal_x_right=true if (((true_control_x = true)));
        legal_x_right=false if !(((true_control_x = true)));
        next_control_o=true if (((true_control_x = true)));
        next_control_o=false if !(((true_control_x = true)));
        next_control_x=true if (((true_control_o = true)));
        next_control_x=false if !(((true_control_o = true)));
        next_l=true if (((true_root = true) and (does_x_left = true)));
        next_l=false if !(((true_root = true) and (does_x_left = true)));
        next_ll=true if (((true_l = true) and (does_o_left = true)));
        next_ll=false if !(((true_l = true) and (does_o_left = true)));
        next_lr=true if (((true_l = true) and (does_o_right = true)));
        next_lr=false if !(((true_l = true) and (does_o_right = true)));
        next_r=true if (((true_root = true) and (does_x_right = true)));
        next_r=false if !(((true_root = true) and (does_x_right = true)));
        next_rl=true if (((true_r = true) and (does_o_left = true)));
        next_rl=false if !(((true_r = true) and (does_o_left = true)));
        next_rll=true if (((true_rl = true) and (does_x_left = true)));
        next_rll=false if !(((true_rl = true) and (does_x_left = true)));
        next_rlr=true if (((true_rl = true) and (does_x_right = true)));
        next_rlr=false if !(((true_rl = true) and (does_x_right = true)));
        next_root=false if (ok = 0);
        next_rr=true if (((true_r = true) and (does_o_right = true)));
        next_rr=false if !(((true_r = true) and (does_o_right = true)));
        next_rrl=true if (((true_rr = true) and (does_x_left = true)));
        next_rrl=false if !(((true_rr = true) and (does_x_left = true)));
        next_rrr=true if (((true_rr = true) and (does_x_right = true)));
        next_rrr=false if !(((true_rr = true) and (does_x_right = true)));
        sees_o_doneleft=true if (((does_o_left = true)));
        sees_o_doneleft=false if !(((does_o_left = true)));
        sees_o_doneright=true if (((does_o_right = true)));
        sees_o_doneright=false if !(((does_o_right = true)));
        sees_o_xdone=true if (((does_o_noop = true)));
        sees_o_xdone=false if !(((does_o_noop = true)));
        sees_x_doneleft=true if (((does_x_left = true)));
        sees_x_doneleft=false if !(((does_x_left = true)));
        sees_x_doneright=true if (((does_x_right = true)));
        sees_x_doneright=false if !(((does_x_right = true)));
        sees_x_odone=true if (((does_x_noop = true)));
        sees_x_odone=false if !(((does_x_noop = true)));
        terminal=true if (((true_ll = true)) or ((true_lr = true)) or ((true_rll = true)) or ((true_rlr = true)) or ((true_rrl = true)) or ((true_rrr = true)));
        terminal=false if !(((true_ll = true)) or ((true_lr = true)) or ((true_rll = true)) or ((true_rlr = true)) or ((true_rrl = true)) or ((true_rrr = true)));

        -- print the next for actions
        -- local observation evolution
        does_o_left = true if (player_o.Action = left and init = 0 and counter = 0 and act_step = true and terminal = false);
        does_o_left = false if (counter = 2 and act_step = true);
        does_o_left = does_o_left  if !((counter = 2 and act_step = true) or (player_o.Action = left and init = 0 and counter = 0 and act_step = true and terminal = false));
        does_o_noop = true if (player_o.Action = noop and init = 0 and counter = 0 and act_step = true and terminal = false);
        does_o_noop = false if (counter = 2 and act_step = true);
        does_o_noop = does_o_noop  if !((counter = 2 and act_step = true) or (player_o.Action = noop and init = 0 and counter = 0 and act_step = true and terminal = false));
        does_o_right = true if (player_o.Action = right and init = 0 and counter = 0 and act_step = true and terminal = false);
        does_o_right = false if (counter = 2 and act_step = true);
        does_o_right = does_o_right  if !((counter = 2 and act_step = true) or (player_o.Action = right and init = 0 and counter = 0 and act_step = true and terminal = false));
        does_x_left = true if (player_x.Action = left and init = 0 and counter = 0 and act_step = true and terminal = false);
        does_x_left = false if (counter = 2 and act_step = true);
        does_x_left = does_x_left  if !((counter = 2 and act_step = true) or (player_x.Action = left and init = 0 and counter = 0 and act_step = true and terminal = false));
        does_x_noop = true if (player_x.Action = noop and init = 0 and counter = 0 and act_step = true and terminal = false);
        does_x_noop = false if (counter = 2 and act_step = true);
        does_x_noop = does_x_noop  if !((counter = 2 and act_step = true) or (player_x.Action = noop and init = 0 and counter = 0 and act_step = true and terminal = false));
        does_x_right = true if (player_x.Action = right and init = 0 and counter = 0 and act_step = true and terminal = false);
        does_x_right = false if (counter = 2 and act_step = true);
        does_x_right = does_x_right  if !((counter = 2 and act_step = true) or (player_x.Action = right and init = 0 and counter = 0 and act_step = true and terminal = false));
        true_control_o = next_control_o if ((init = 0 and act_step = true and counter = 2));
        true_control_o = true_control_o if !((init = 0 and act_step = true and counter = 2));
        true_control_x = next_control_x if ((init = 0 and act_step = true and counter = 2));
        true_control_x = true if (init = 2);
        true_control_x = true_control_x if !((init = 0 and act_step = true and counter = 2) or (init = 2));
        true_l = next_l if ((init = 0 and act_step = true and counter = 2));
        true_l = true_l if !((init = 0 and act_step = true and counter = 2));
        true_ll = next_ll if ((init = 0 and act_step = true and counter = 2));
        true_ll = true_ll if !((init = 0 and act_step = true and counter = 2));
        true_lr = next_lr if ((init = 0 and act_step = true and counter = 2));
        true_lr = true_lr if !((init = 0 and act_step = true and counter = 2));
        true_r = next_r if ((init = 0 and act_step = true and counter = 2));
        true_r = true_r if !((init = 0 and act_step = true and counter = 2));
        true_rl = next_rl if ((init = 0 and act_step = true and counter = 2));
        true_rl = true_rl if !((init = 0 and act_step = true and counter = 2));
        true_rll = next_rll if ((init = 0 and act_step = true and counter = 2));
        true_rll = true_rll if !((init = 0 and act_step = true and counter = 2));
        true_rlr = next_rlr if ((init = 0 and act_step = true and counter = 2));
        true_rlr = true_rlr if !((init = 0 and act_step = true and counter = 2));
        true_root = next_root if ((init = 0 and act_step = true and counter = 2));
        true_root = true if (init = 2);
        true_root = true_root if !((init = 0 and act_step = true and counter = 2) or (init = 2));
        true_rr = next_rr if ((init = 0 and act_step = true and counter = 2));
        true_rr = true_rr if !((init = 0 and act_step = true and counter = 2));
        true_rrl = next_rrl if ((init = 0 and act_step = true and counter = 2));
        true_rrl = true_rrl if !((init = 0 and act_step = true and counter = 2));
        true_rrr = next_rrr if ((init = 0 and act_step = true and counter = 2));
        true_rrr = true_rrr if !((init = 0 and act_step = true and counter = 2));
        done_o_left_1 = does_o_left if ((init = 0 and act_step = true and counter = 2));
        done_o_left_1 = done_o_left_1 if !((init = 0 and act_step = true and counter = 2));
        done_o_left_2 = done_o_left_1 if ((init = 0 and act_step = true and counter = 2));
        done_o_left_2 = done_o_left_2 if !((init = 0 and act_step = true and counter = 2));
        done_o_left_3 = done_o_left_2 if ((init = 0 and act_step = true and counter = 2));
        done_o_left_3 = done_o_left_3 if !((init = 0 and act_step = true and counter = 2));
        done_o_noop_1 = does_o_noop if ((init = 0 and act_step = true and counter = 2));
        done_o_noop_1 = done_o_noop_1 if !((init = 0 and act_step = true and counter = 2));
        done_o_noop_2 = done_o_noop_1 if ((init = 0 and act_step = true and counter = 2));
        done_o_noop_2 = done_o_noop_2 if !((init = 0 and act_step = true and counter = 2));
        done_o_noop_3 = done_o_noop_2 if ((init = 0 and act_step = true and counter = 2));
        done_o_noop_3 = done_o_noop_3 if !((init = 0 and act_step = true and counter = 2));
        done_o_right_1 = does_o_right if ((init = 0 and act_step = true and counter = 2));
        done_o_right_1 = done_o_right_1 if !((init = 0 and act_step = true and counter = 2));
        done_o_right_2 = done_o_right_1 if ((init = 0 and act_step = true and counter = 2));
        done_o_right_2 = done_o_right_2 if !((init = 0 and act_step = true and counter = 2));
        done_o_right_3 = done_o_right_2 if ((init = 0 and act_step = true and counter = 2));
        done_o_right_3 = done_o_right_3 if !((init = 0 and act_step = true and counter = 2));
        done_x_left_1 = does_x_left if ((init = 0 and act_step = true and counter = 2));
        done_x_left_1 = done_x_left_1 if !((init = 0 and act_step = true and counter = 2));
        done_x_left_2 = done_x_left_1 if ((init = 0 and act_step = true and counter = 2));
        done_x_left_2 = done_x_left_2 if !((init = 0 and act_step = true and counter = 2));
        done_x_left_3 = done_x_left_2 if ((init = 0 and act_step = true and counter = 2));
        done_x_left_3 = done_x_left_3 if !((init = 0 and act_step = true and counter = 2));
        done_x_noop_1 = does_x_noop if ((init = 0 and act_step = true and counter = 2));
        done_x_noop_1 = done_x_noop_1 if !((init = 0 and act_step = true and counter = 2));
        done_x_noop_2 = done_x_noop_1 if ((init = 0 and act_step = true and counter = 2));
        done_x_noop_2 = done_x_noop_2 if !((init = 0 and act_step = true and counter = 2));
        done_x_noop_3 = done_x_noop_2 if ((init = 0 and act_step = true and counter = 2));
        done_x_noop_3 = done_x_noop_3 if !((init = 0 and act_step = true and counter = 2));
        done_x_right_1 = does_x_right if ((init = 0 and act_step = true and counter = 2));
        done_x_right_1 = done_x_right_1 if !((init = 0 and act_step = true and counter = 2));
        done_x_right_2 = done_x_right_1 if ((init = 0 and act_step = true and counter = 2));
        done_x_right_2 = done_x_right_2 if !((init = 0 and act_step = true and counter = 2));
        done_x_right_3 = done_x_right_2 if ((init = 0 and act_step = true and counter = 2));
        done_x_right_3 = done_x_right_3 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_1 = sees_o_doneleft if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_1 = seen_o_doneleft_1 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_2 = seen_o_doneleft_1 if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_2 = seen_o_doneleft_2 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_3 = seen_o_doneleft_2 if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_3 = seen_o_doneleft_3 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_4 = seen_o_doneleft_3 if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneleft_4 = seen_o_doneleft_4 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_1 = sees_o_doneright if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_1 = seen_o_doneright_1 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_2 = seen_o_doneright_1 if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_2 = seen_o_doneright_2 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_3 = seen_o_doneright_2 if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_3 = seen_o_doneright_3 if !((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_4 = seen_o_doneright_3 if ((init = 0 and act_step = true and counter = 2));
        seen_o_doneright_4 = seen_o_doneright_4 if !((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_1 = sees_o_xdone if ((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_1 = seen_o_xdone_1 if !((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_2 = seen_o_xdone_1 if ((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_2 = seen_o_xdone_2 if !((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_3 = seen_o_xdone_2 if ((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_3 = seen_o_xdone_3 if !((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_4 = seen_o_xdone_3 if ((init = 0 and act_step = true and counter = 2));
        seen_o_xdone_4 = seen_o_xdone_4 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_1 = sees_x_doneleft if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_1 = seen_x_doneleft_1 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_2 = seen_x_doneleft_1 if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_2 = seen_x_doneleft_2 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_3 = seen_x_doneleft_2 if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_3 = seen_x_doneleft_3 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_4 = seen_x_doneleft_3 if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneleft_4 = seen_x_doneleft_4 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_1 = sees_x_doneright if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_1 = seen_x_doneright_1 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_2 = seen_x_doneright_1 if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_2 = seen_x_doneright_2 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_3 = seen_x_doneright_2 if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_3 = seen_x_doneright_3 if !((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_4 = seen_x_doneright_3 if ((init = 0 and act_step = true and counter = 2));
        seen_x_doneright_4 = seen_x_doneright_4 if !((init = 0 and act_step = true and counter = 2));
        seen_x_odone_1 = sees_x_odone if ((init = 0 and act_step = true and counter = 2));
        seen_x_odone_1 = seen_x_odone_1 if !((init = 0 and act_step = true and counter = 2));
        seen_x_odone_2 = seen_x_odone_1 if ((init = 0 and act_step = true and counter = 2));
        seen_x_odone_2 = seen_x_odone_2 if !((init = 0 and act_step = true and counter = 2));
        seen_x_odone_3 = seen_x_odone_2 if ((init = 0 and act_step = true and counter = 2));
        seen_x_odone_3 = seen_x_odone_3 if !((init = 0 and act_step = true and counter = 2));
        seen_x_odone_4 = seen_x_odone_3 if ((init = 0 and act_step = true and counter = 2));
        seen_x_odone_4 = seen_x_odone_4 if !((init = 0 and act_step = true and counter = 2));
    end Evolution
end Agent

Agent player_o
    Lobsvars={init,counter,act_step, seen_o_doneleft_1, seen_o_doneleft_2, seen_o_doneleft_3, seen_o_doneleft_4, seen_o_doneright_1, seen_o_doneright_2, seen_o_doneright_3, seen_o_doneright_4, seen_o_xdone_1, seen_o_xdone_2, seen_o_xdone_3, seen_o_xdone_4, legal_o_left, legal_o_noop, legal_o_right, done_o_left_1, done_o_left_2, done_o_left_3, done_o_noop_1, done_o_noop_2, done_o_noop_3, done_o_right_1, done_o_right_2, done_o_right_3};
    Vars:

    end Vars
    Actions = {left, noop, right, none};
    Protocol:
        (Environment.init = 0 and Environment.counter = 0 and Environment.act_step = true and Environment.legal_o_left = true): {left};
        (Environment.init = 0 and Environment.counter = 0 and Environment.act_step = true and Environment.legal_o_noop = true): {noop};
        (Environment.init = 0 and Environment.counter = 0 and Environment.act_step = true and Environment.legal_o_right = true): {right};
        Other : {none};
    end Protocol
    Evolution:

    end Evolution
end Agent


Agent player_x
    Lobsvars={init,counter,act_step, seen_x_doneleft_1, seen_x_doneleft_2, seen_x_doneleft_3, seen_x_doneleft_4, seen_x_doneright_1, seen_x_doneright_2, seen_x_doneright_3, seen_x_doneright_4, seen_x_odone_1, seen_x_odone_2, seen_x_odone_3, seen_x_odone_4, legal_x_left, legal_x_noop, legal_x_right, done_x_left_1, done_x_left_2, done_x_left_3, done_x_noop_1, done_x_noop_2, done_x_noop_3, done_x_right_1, done_x_right_2, done_x_right_3};
    Vars:

    end Vars
    Actions = {left, noop, right, none};
    Protocol:
        (Environment.init = 0 and Environment.counter = 0 and Environment.act_step = true and Environment.legal_x_left = true): {left};
        (Environment.init = 0 and Environment.counter = 0 and Environment.act_step = true and Environment.legal_x_noop = true): {noop};
        (Environment.init = 0 and Environment.counter = 0 and Environment.act_step = true and Environment.legal_x_right = true): {right};
        Other : {none};
    end Protocol
    Evolution:

    end Evolution
end Agent

Evaluation
    goal_o_0 if (((Environment.true_ll = false) and (Environment.true_lr = false) and (Environment.true_rll = false) and (Environment.true_rlr = false) and (Environment.true_rrl = false) and (Environment.true_rrr = false)));
    goal_o_10 if (((Environment.true_rlr = true)));
    goal_o_4 if (((Environment.true_rrl = true)));
    goal_o_6 if (((Environment.true_rrr = true)));
    goal_o_7 if (((Environment.true_lr = true)));
    goal_o_8 if (((Environment.true_rll = true)));
    goal_o_9 if (((Environment.true_ll = true)));
    goal_x_0 if (((Environment.true_ll = false) and (Environment.true_lr = false) and (Environment.true_rll = false) and (Environment.true_rlr = false) and (Environment.true_rrl = false) and (Environment.true_rrr = false)));
    goal_x_4 if (((Environment.true_rlr = true)));
    goal_x_5 if (((Environment.true_rrl = true)));
    goal_x_6 if (((Environment.true_rrr = true)));
    goal_x_7 if (((Environment.true_ll = true)));
    goal_x_8 if (((Environment.true_rll = true)));
    goal_x_9 if (((Environment.true_lr = true)));
    t if (Environment.terminal = true and Environment.act_step = true and Environment.init = 0 and Environment.counter = 0);
    init if (Environment.counter = 0 and Environment.act_step = false and Environment.init = 1);
    control_x if Environment.true_control_x = true;
    next_control_o if Environment.next_control_o = true;
    next_control_x if Environment.next_control_x = true;
    root if Environment.true_root = true;
    terminal if Environment.terminal = true;
    real if (Environment.counter = 0 and Environment.act_step = true and Environment.init = 0);
    seen_o_xdone_1 if Environment.seen_o_xdone_1 = true;
    seen_o_right_2 if Environment.seen_o_doneright_2 = true;
    seen_o_xdone_3 if Environment.seen_o_xdone_3 = true;
    done_x_right_3 if Environment.done_x_right_3 = true;
    real if (Environment.act_step = true and Environment.init = 0 and Environment.counter = 0);
end Evaluation

InitStates
    Environment.counter = 0 and Environment.ok = 0 and Environment.init = 2 and Environment.act_step = false
    and Environment.true_control_o = false
    and Environment.next_control_o = false
    and Environment.true_control_x = false
    and Environment.next_control_x = false
    and Environment.true_l = false
    and Environment.next_l = false
    and Environment.true_ll = false
    and Environment.next_ll = false
    and Environment.true_lr = false
    and Environment.next_lr = false
    and Environment.true_r = false
    and Environment.next_r = false
    and Environment.true_rl = false
    and Environment.next_rl = false
    and Environment.true_rll = false
    and Environment.next_rll = false
    and Environment.true_rlr = false
    and Environment.next_rlr = false
    and Environment.true_root = false
    and Environment.next_root = false
    and Environment.true_rr = false
    and Environment.next_rr = false
    and Environment.true_rrl = false
    and Environment.next_rrl = false
    and Environment.true_rrr = false
    and Environment.next_rrr = false
    and Environment.sees_o_doneleft = false
    and Environment.seen_o_doneleft_1 = false
    and Environment.seen_o_doneleft_2 = false
    and Environment.seen_o_doneleft_3 = false
    and Environment.seen_o_doneleft_4 = false
    and Environment.sees_o_doneright = false
    and Environment.seen_o_doneright_1 = false
    and Environment.seen_o_doneright_2 = false
    and Environment.seen_o_doneright_3 = false
    and Environment.seen_o_doneright_4 = false
    and Environment.sees_o_xdone = false
    and Environment.seen_o_xdone_1 = false
    and Environment.seen_o_xdone_2 = false
    and Environment.seen_o_xdone_3 = false
    and Environment.seen_o_xdone_4 = false
    and Environment.sees_x_doneleft = false
    and Environment.seen_x_doneleft_1 = false
    and Environment.seen_x_doneleft_2 = false
    and Environment.seen_x_doneleft_3 = false
    and Environment.seen_x_doneleft_4 = false
    and Environment.sees_x_doneright = false
    and Environment.seen_x_doneright_1 = false
    and Environment.seen_x_doneright_2 = false
    and Environment.seen_x_doneright_3 = false
    and Environment.seen_x_doneright_4 = false
    and Environment.sees_x_odone = false
    and Environment.seen_x_odone_1 = false
    and Environment.seen_x_odone_2 = false
    and Environment.seen_x_odone_3 = false
    and Environment.seen_x_odone_4 = false
    and Environment.legal_o_left = false
    and Environment.legal_o_noop = false
    and Environment.legal_o_right = false
    and Environment.legal_x_left = false
    and Environment.legal_x_noop = false
    and Environment.legal_x_right = false
    and Environment.terminal = false
    and Environment.does_o_left = false
    and Environment.done_o_left_1 = false
    and Environment.done_o_left_2 = false
    and Environment.done_o_left_3 = false
    and Environment.does_o_noop = false
    and Environment.done_o_noop_1 = false
    and Environment.done_o_noop_2 = false
    and Environment.done_o_noop_3 = false
    and Environment.does_o_right = false
    and Environment.done_o_right_1 = false
    and Environment.done_o_right_2 = false
    and Environment.done_o_right_3 = false
    and Environment.does_x_left = false
    and Environment.done_x_left_1 = false
    and Environment.done_x_left_2 = false
    and Environment.done_x_left_3 = false
    and Environment.does_x_noop = false
    and Environment.done_x_noop_1 = false
    and Environment.done_x_noop_2 = false
    and Environment.done_x_noop_3 = false
    and Environment.does_x_right = false
    and Environment.done_x_right_1 = false
    and Environment.done_x_right_2 = false
    and Environment.done_x_right_3 = false
;
end InitStates

Groups
end Groups

Fairness
end Fairness

Formulae
    AF t;
    AG (real -> (AX AX AX AX real));
    AG (t -> (goal_x_4 or goal_x_6 or goal_x_8 or goal_x_7 or goal_x_9 or goal_x_5));
    AG (t -> (goal_o_10 or goal_o_4 or goal_o_6 or goal_o_8 or goal_o_7 or goal_o_9));
    <<e>> [[x]] [[y]] (Environment, e) (player_x, x) (player_o, y) G (t -> K(player_x, terminal));
    <<e>> [[x]] [[y]] (Environment, e) (player_x, x) (player_o, y) G (t -> K(player_o, terminal));
    <<e>> [[x]] [[y]] (Environment, e) (player_x, x) (player_o, y) G ((goal_o_6 and t) -> K(player_o, goal_o_6 or goal_o_4));
    AG (t -> K(player_x, terminal));
    AG (t -> K(player_o, terminal));
    AG ((goal_o_6 and t) -> K(player_o, goal_o_6 or goal_o_4));
    AG ((goal_x_8 and t) -> K(player_x, goal_x_8 or goal_x_5));
    AG ((goal_x_8 and t) -> K(player_x, goal_x_8));
    AG (init -> (K(player_x, root) and K(player_o, root) and K(player_x, control_x) and K(player_o, control_x)));
    (AX AX (K(player_x, root) and K(player_o, root) and K(player_x, control_x) and K(player_o, control_x) and K(player_x, next_control_o)));
    <<e>> <<x>> <<y>> (Environment, e) (player_x, x) (player_o, y) ((F (t and (goal_x_8)) and ([[xa]] (player_x, xa) F (t and (goal_x_0 or goal_x_7 or goal_x_4 or goal_x_6 or goal_x_8 or goal_x_5)))) and (F (t and (goal_o_8)) and ([[oa]] (player_o, oa) F (t and (goal_o_0 or goal_o_4 or goal_o_6 or goal_o_8 or goal_o_7)))));
    <<e>> <<x>> <<y>> (Environment, e) (player_x, x) (player_o, y) ((F (t and (goal_x_7)) and ([[xa]] (player_x, xa) F (t and (goal_x_0 or goal_x_7 or goal_x_4 or goal_x_6 or goal_x_5)))) and (F (t and (goal_o_9)) and ([[oa]] (player_o, oa) F (t and (goal_o_0 or goal_o_4 or goal_o_6 or goal_o_8 or goal_o_7 or goal_o_9)))));
    <<e>> <<x>> [[y]] (Environment, e) (player_x, x) (player_o, y) (F (t and (goal_x_7 or goal_x_8 or goal_x_9)));
    AG ((real and seen_o_xdone_1 and seen_o_right_2 and seen_o_xdone_3) -> K(player_o, done_x_right_3));
    <<env>> <<x>> <<o>> (Environment, env) (player_x, x) (player_o, o) (((F (goal_x_0 and t) and ([[x0]] (player_x, x0) F (t and (goal_x_0 )))) or (F (goal_x_4 and t) and ([[x1]] (player_x, x1) F (t and (goal_x_0 or goal_x_4 )))) or (F (goal_x_5 and t) and ([[x2]] (player_x, x2) F (t and (goal_x_0 or goal_x_4 or goal_x_5 )))) or (F (goal_x_6 and t) and ([[x3]] (player_x, x3) F (t and (goal_x_0 or goal_x_4 or goal_x_5 or goal_x_6 )))) or (F (goal_x_7 and t) and ([[x4]] (player_x, x4) F (t and (goal_x_0 or goal_x_4 or goal_x_5 or goal_x_6 or goal_x_7 )))) or (F (goal_x_8 and t) and ([[x5]] (player_x, x5) F (t and (goal_x_0 or goal_x_4 or goal_x_5 or goal_x_6 or goal_x_7 or goal_x_8 )))) or (F (goal_x_9 and t) and ([[x6]] (player_x, x6) F (t and (goal_x_0 or goal_x_4 or goal_x_5 or goal_x_6 or goal_x_7 or goal_x_8 or goal_x_9 )))) )  and ((F (goal_o_0 and t) and ([[o0]] (player_o, o0) F (t and (goal_o_0 )))) or (F (goal_o_4 and t) and ([[o1]] (player_o, o1) F (t and (goal_o_0 or goal_o_4 )))) or (F (goal_o_6 and t) and ([[o2]] (player_o, o2) F (t and (goal_o_0 or goal_o_4 or goal_o_6 )))) or (F (goal_o_7 and t) and ([[o3]] (player_o, o3) F (t and (goal_o_0 or goal_o_4 or goal_o_6 or goal_o_7 )))) or (F (goal_o_8 and t) and ([[o4]] (player_o, o4) F (t and (goal_o_0 or goal_o_4 or goal_o_6 or goal_o_7 or goal_o_8 )))) or (F (goal_o_9 and t) and ([[o5]] (player_o, o5) F (t and (goal_o_0 or goal_o_4 or goal_o_6 or goal_o_7 or goal_o_8 or goal_o_9 )))) or (F (goal_o_10 and t) and ([[o6]] (player_o, o6) F (t and (goal_o_0 or goal_o_4 or goal_o_6 or goal_o_7 or goal_o_8 or goal_o_9 or goal_o_10 )))) ) );
end Formulae
